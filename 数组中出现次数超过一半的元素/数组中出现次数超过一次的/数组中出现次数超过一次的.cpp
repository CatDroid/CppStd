// 数组中出现次数超过一次的.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"

/*
找出数组中出现次数超过一半的数字

一个数量为N的整数数组，其中有很多重复，
其中一个数字出现次数超过N/2，请将该数字找出来。
要求高效，用c/c++语言实现。


注意：
只有一个数字  超过 N/2  而且 超过N/2 也最多只有一个数字

编程之美
每次删除两个不相同的数字，在剩下的数组中，仍然不影响某一个数字的出现次数超过数组总数的一半 这个事实
如果数组中有一个数字出现次数超过一半，不可能有另外一个数字出现次数比它多
局部抵消法 

假定 N为超过1/2的数字出现的次数  a是其他数字的个数

N / (N+a) > 1/2   --->  N > a  只要满足N>a就成立   所以即使 N-1 > a-1 



或者
还可以对这个数组进行排序，然后直接取中间的那个数。因为这个数字出现的次数超过一半

*/
int main() 
{
	//char arr[] = { 6,8 ,6 ,6, 6, 6 , 11 , 5, 6, 7 , 1 ,6, 5, 9 , 6, 6 }; // = 6
	char arr[] = { 8,8,8,8,7,7,7,7 ,1 }; // = 1 
	//char arr[] = { 8,8,8,8,7,7,7,7 }; // = 8

	// 只适用于明确有数字，超过一半的情况 

	int justYou = 0, existsTime = 0, i = 0;
	for (i = 0; i < sizeof(arr); i++) {
		if (existsTime == 0) {
			justYou = arr[i];
			existsTime++;
		} else {
			if (justYou == arr[i]) existsTime++;
			else existsTime--;  
		}
	}

	printf("justYou = %d \n", justYou);

    return 0;
}

